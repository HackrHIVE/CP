#include <bits/stdc++.h>
using namespace std;
class Solution
{
public:
    bool check(int lo, int hi, string s)
    {
        unordered_map<char, int> umap;
        for (int i = lo; i <= hi; i++)
        {
            umap[s[i]]++;
        }
        int oddCount = 0;
        for (auto x : umap)
        {
            if (x.second % 2 != 0)
                oddCount++;
        }
        return oddCount <= 1;
    }
    int check1(int lo, int hi, string s)
    {
        unordered_map<char, int> umap;
        for (int i = lo; i <= hi; i++)
        {
            umap[s[i]]++;
        }
        int len = 0;
        int oddCount = 0;
        for (auto x : umap)
        {
            len += x.second;
            if (x.second % 2 != 0)
                oddCount++;
        }
        if (oddCount == 0 && len % 2 == 0)
            return len;
        else if (oddCount == 1 && len % 2 != 0)
            return len;
        return 0;
    }
    int longestAwesome(string s)
    {
        int n = s.length();
        int max = 1;
        for (int len = n; len >= 0; len--)
        {
            for (int i = 0; i <= n - len; i++)
            {
                int j = i + len - 1;
                if (check(i, j, s))
                    return max = j - i + 1;
                if (max < j - i + 1)
                    max = j - i + 1;
            }
        }
        return max;
        int lo = 0;
        int hi = s.length() - 1;
        while (lo < hi)
        {
            int out = check1(lo, hi, s);
            if (out > 0)
                return out;
            out = check1(lo, hi - 1, s);
            if (out > 0)
                return out;
            out = check1(lo + 1, hi, s);
            if (out > 0)
                return out;
            lo++;
            hi--;
        }
        return 1;
    }
};
/*
Test Cases:
"9811524080783575748129170748140446953606489875710251432327706034589955956823449575498554676678597110717362476298900064412130551163013411853693630342368689371359525581171766994337344853860338329191571460632276885929355828331867651701762746454783176749784019932044334492571957475933305726258980593936154779173456606729622946442000441179855403273385111857508400442920433454953362332107876812672235989950495501574472057756203228619852257524350034904989599040660467698553894"
"72944500609608587454645358634105536238441276982840102577518496989654737925986113478501413721878398531205490341124084617985937111480367753892073856073883727432271935437130419591697614328902722100997070495277277706691679212327309057527026249071595473357750997979664805958934215078281643646522069085819343711436873307922196210730037786237177508954272259412068217030455648747479131576137122529349772290834588546260739881783906085696583057021281858438095333905139926491"
"24894084051248671069692033977883200238914369471171769429345874089276662812686979225575200219016332015632696539825043402755474641331320611872996619140812668619538178648243661920347246060427974904028186048763331109193778592390152665758491878282901691919836483113327613515707"

*/
int main()
{
    Solution *sol = new Solution();
    cout << sol->longestAwesomeendl;
    return 0;
}